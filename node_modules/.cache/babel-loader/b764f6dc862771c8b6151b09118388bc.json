{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\washy\\\\Documents\\\\GitHub\\\\gomoku\\\\gomoku\\\\src\\\\canvas.js\";\nimport React, { useRef, useEffect } from 'react';\n\nconst Canvas = props => {\n  const canvasRef = useRef(null);\n\n  const getClickPos = (canvas, event) => {\n    if (pieces.turn == 'black') pieces.black.push([event.offsetX, event.offsetY, false]);else if (pieces.turn == 'white') pieces.white.push([event.offsetX, event.offsetY, false]);\n  };\n\n  const draw = ctx => {\n    /* padding */\n    const p = ctx.canvas.height / 80;\n    /* set grid to 97% of canvas */\n\n    const cW = ctx.canvas.width * 0.97;\n    const cH = ctx.canvas.height * 0.97;\n    /* draw a 15x15 grid*/\n\n    for (let i = 0; i <= 480; i += 32) {\n      /* horizontal lines */\n      ctx.moveTo(0.5 + i + p, p);\n      ctx.lineTo(0.5 + i + p, cH + p);\n    }\n\n    for (let i = 0; i <= 480; i += 32) {\n      /* vertical lines */\n      ctx.moveTo(p, 0.5 + i + p);\n      ctx.lineTo(cW + p, 0.5 + i + p);\n    }\n    /* use black lines for the grid */\n\n\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.addEventListener('mousedown', e => {\n      getClickPos(canvas, e);\n      /* iterate through every tile */\n\n      for (let x = 23; x < 480; x += 32) {\n        for (let y = 23; y < 480; y += 32) {\n          /* draw white pieces */\n          for (let i in pieces.white) {\n            let clickX = pieces.white[i][0];\n            let clickY = pieces.white[i][1];\n\n            if (clickX > x - 16 && clickX < x + 16 && clickY > y - 16 && clickY < y + 16) {\n              context.fillStyle = 'white';\n              context.fillRect(x - 8, y - 8, 15, 15);\n              grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"WHT\";\n              pieces.white[i][2] = true;\n            }\n          }\n          /* draw black pieces */\n\n\n          for (let i in pieces.black) {\n            let clickX = pieces.black[i][0];\n            let clickY = pieces.black[i][1];\n\n            if (clickX > x - 16 && clickX < x + 16 && clickY > y - 16 && clickY < y + 16) {\n              context.fillStyle = 'black';\n              context.fillRect(x - 8, y - 8, 15, 15);\n              grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"BLK\";\n              pieces.black[i][2] = true;\n            }\n          }\n        }\n      }\n      /* print grid array to console */\n\n\n      let gridString = \"\";\n\n      for (let y = 0; y < 15; y++) {\n        gridString += \"\\n\";\n\n        for (let x = 0; x < 15; x++) {\n          gridString += `${x + 1},${y + 1}[${grid[x][y]}]`;\n        }\n      }\n\n      console.log(gridString);\n      /* check to see if 5 in a row has been achieved */\n\n      for (let x = 0; x < 11; x++) {\n        for (let y = 0; y < 15; y++) {\n          if (grid[x][y] == 'BLK' || grid[x][y] == 'WHT') {\n            /* check for a horizontal 5 */\n            if (grid[x][y] == grid[x + 1][y] && grid[x][y] == grid[x + 2][y] && grid[x][y] == grid[x + 3][y] && grid[x][y] == grid[x + 4][y]) {\n              console.log(\"WINNERWINNERWINNERWINNERWINNER\");\n            }\n          }\n        }\n      }\n      /* check to see if a player has finished turn by \r\n      placing a true piece */\n\n\n      if (pieces.turn == 'black' && pieces.black[pieces.black.length - 1][2] == true) {\n        pieces.turn = 'white';\n        document.getElementById('whosturn').innerHTML = \"It is white's turn\";\n      } else if (pieces.turn == 'white' && pieces.white[pieces.white.length - 1][2] == true) {\n        pieces.turn = 'black';\n        document.getElementById('whosturn').innerHTML = \"It is black's turn\";\n      }\n\n      console.log(`${pieces.turn}'s turn`);\n    });\n    /* draw comes here */\n\n    draw(context);\n  }, [draw]);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }\n  }));\n};\n\nexport { Canvas };","map":{"version":3,"sources":["C:/Users/washy/Documents/GitHub/gomoku/gomoku/src/canvas.js"],"names":["React","useRef","useEffect","Canvas","props","canvasRef","getClickPos","canvas","event","pieces","turn","black","push","offsetX","offsetY","white","draw","ctx","p","height","cW","width","cH","i","moveTo","lineTo","strokeStyle","stroke","current","context","getContext","addEventListener","e","x","y","clickX","clickY","fillStyle","fillRect","grid","Math","round","gridString","console","log","length","document","getElementById","innerHTML"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react';\r\n\r\nconst Canvas = props => {\r\n  \r\n    const canvasRef = useRef(null)\r\n  \r\n    const getClickPos = (canvas, event) => {\r\n      if (pieces.turn == 'black')\r\n        pieces.black.push([event.offsetX, event.offsetY, false]);\r\n      else if (pieces.turn == 'white')\r\n        pieces.white.push([event.offsetX, event.offsetY, false]);\r\n    }\r\n  \r\n    const draw = ctx => {\r\n      /* padding */\r\n      const p = ctx.canvas.height / 80;\r\n      /* set grid to 97% of canvas */\r\n      const cW = ctx.canvas.width * 0.97;\r\n      const cH = ctx.canvas.height * 0.97;\r\n      \r\n      /* draw a 15x15 grid*/\r\n      for (let i = 0; i <= 480; i += 32){\r\n        /* horizontal lines */\r\n        ctx.moveTo(0.5 + i + p, p);\r\n        ctx.lineTo(0.5 + i + p, cH + p)\r\n      }\r\n      for (let i = 0; i <= 480; i += 32) {\r\n        /* vertical lines */\r\n        ctx.moveTo(p, 0.5 + i + p);\r\n        ctx.lineTo(cW + p, 0.5 + i + p);\r\n      }\r\n      /* use black lines for the grid */\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.stroke()\r\n    }\r\n  \r\n    useEffect(() => {\r\n      const canvas = canvasRef.current\r\n      const context = canvas.getContext('2d')\r\n      canvas.addEventListener('mousedown', (e) => {\r\n  \r\n        getClickPos(canvas, e)\r\n  \r\n        /* iterate through every tile */\r\n        for (let x = 23; x < 480; x += 32){\r\n          for (let y = 23; y < 480; y += 32){\r\n  \r\n            /* draw white pieces */\r\n            for (let i in pieces.white){\r\n              let clickX = pieces.white[i][0];\r\n              let clickY = pieces.white[i][1];\r\n              if (clickX > x - 16 && clickX < x + 16\r\n                && clickY > y - 16 && clickY < y + 16){\r\n                context.fillStyle = 'white';\r\n                context.fillRect(x - 8, y - 8, 15, 15);\r\n                grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"WHT\";\r\n                pieces.white[i][2] = true;\r\n              }\r\n            }\r\n  \r\n            /* draw black pieces */\r\n            for (let i in pieces.black){\r\n              let clickX = pieces.black[i][0];\r\n              let clickY = pieces.black[i][1];\r\n              if (clickX > x - 16 && clickX < x + 16\r\n                && clickY > y - 16 && clickY < y + 16){\r\n                context.fillStyle = 'black';\r\n                context.fillRect(x - 8, y - 8, 15, 15);\r\n                grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"BLK\";\r\n                pieces.black[i][2] = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* print grid array to console */\r\n        let gridString = \"\";\r\n        for (let y = 0; y < 15; y++){\r\n          gridString += \"\\n\"\r\n          for (let x = 0; x < 15; x++){\r\n            gridString += `${x + 1},${y + 1}[${grid[x][y]}]`\r\n          }\r\n        }\r\n        console.log(gridString)\r\n  \r\n        /* check to see if 5 in a row has been achieved */\r\n        for (let x = 0; x < 11; x++){\r\n          for (let y = 0; y < 15; y++){\r\n            if (grid[x][y] == 'BLK' || grid[x][y] == 'WHT'){\r\n              /* check for a horizontal 5 */\r\n              if(grid[x][y] == grid[x + 1][y] && grid[x][y] == grid[x + 2][y]\r\n                && grid[x][y] == grid[x + 3][y] && grid[x][y] == grid[x + 4][y])\r\n                {console.log(\"WINNERWINNERWINNERWINNERWINNER\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* check to see if a player has finished turn by \r\n        placing a true piece */\r\n        if (pieces.turn == 'black' \r\n          && pieces.black[pieces.black.length - 1][2] == true){\r\n            pieces.turn = 'white'\r\n            document.getElementById('whosturn').innerHTML = \"It is white's turn\";\r\n        }\r\n        else if (pieces.turn == 'white'\r\n              && pieces.white[pieces.white.length - 1][2] == true){\r\n            pieces.turn = 'black'\r\n            document.getElementById('whosturn').innerHTML = \"It is black's turn\";  \r\n        }\r\n  \r\n        console.log(`${pieces.turn}'s turn`)\r\n      })\r\n      /* draw comes here */\r\n      draw(context)\r\n    }, [draw])\r\n    \r\n    return <canvas ref={canvasRef} {...props}/>\r\n}\r\n\r\nexport {Canvas};"]},"metadata":{},"sourceType":"module"}