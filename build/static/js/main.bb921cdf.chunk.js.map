{"version":3,"sources":["fonts/GreatVibes-Regular.ttf","canvas.js","board.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","blackScore","whiteScore","resetBoard","board","grid","i","push","j","pieces","black","white","turn","emptyBoard","console","log","Canvas","props","canvasRef","useRef","draw","ctx","canvas","height","cW","width","cH","clearRect","beginPath","moveTo","lineTo","strokeStyle","stroke","x","y","clickX","clickY","Math","round","drawPiece","color","arc","PI","fillStyle","fill","lineWidth","useEffect","current","context","getContext","document","getElementById","onclick","window","confirm","addEventListener","e","event","offsetX","offsetY","gridString","concat","innerText","length","react_default","a","createElement","Object","assign","ref","App","className","rel","type","href","canvas_Canvas","id","src","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bb921cdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GreatVibes-Regular.859a0d36.ttf\";","import React, {useRef, useEffect} from 'react';\r\nimport {emptyBoard} from './board.js';\r\n\r\nlet blackScore = 0;\r\nlet whiteScore = 0;\r\n\r\nfunction resetBoard(){\r\n  const board = emptyBoard();\r\n  for (let i = 0; i < 15; i++){\r\n    board.grid.push([])\r\n    for (let j = 0; j < 15; j++){\r\n    board.grid[i].push(`   `)\r\n    }\r\n  }\r\n  board.pieces.white.push([0,0,true]);\r\n  board.pieces.black.push([0,0,true]);\r\n  console.log(board);\r\n  return board;\r\n}\r\n\r\n//initialize a 15x15 board\r\nlet board = resetBoard();\r\n\r\nconst Canvas = props => {\r\n    const canvasRef = useRef(null);\r\n  \r\n    const getClickPos = (canvas, event) => {\r\n      if (board.pieces.turn == 'black')\r\n        board.pieces.black.push([event.offsetX, event.offsetY, false]);\r\n      else if (board.pieces.turn == 'white')\r\n        board.pieces.white.push([event.offsetX, event.offsetY, false]);\r\n    }\r\n  \r\n    const draw = ctx => {\r\n      /* padding */\r\n      const p = ctx.canvas.height / 80;\r\n      /* set grid to 97% of canvas */\r\n      const cW = ctx.canvas.width * 0.97;\r\n      const cH = ctx.canvas.height * 0.97;\r\n      \r\n      ctx.clearRect(p, p, cW+p, cH+p)\r\n\r\n      ctx.beginPath();\r\n      /* draw a 15x15 grid*/\r\n      for (let i = 0; i <= 480; i += 32){\r\n        /* horizontal lines */\r\n        ctx.moveTo(0.5 + i + p, p);\r\n        ctx.lineTo(0.5 + i + p, cH + p)\r\n      }\r\n      for (let i = 0; i <= 480; i += 32) {\r\n        /* vertical lines */\r\n        ctx.moveTo(p, 0.5 + i + p);\r\n        ctx.lineTo(cW + p, 0.5 + i + p);\r\n      }\r\n      /* use black lines for the grid */\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.stroke()\r\n\r\n      /* iterate through every tile */\r\n      for (let x = 23; x < 480; x += 32){\r\n        for (let y = 23; y < 480; y += 32){\r\n          /* draw white pieces */\r\n          for (let i in board.pieces.white){\r\n            let clickX = board.pieces.white[i][0];\r\n            let clickY = board.pieces.white[i][1];\r\n            if (clickX > x - 16 && clickX < x + 16 &&\r\n            clickY > y - 16 && clickY < y + 16 &&\r\n            board.grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] != \"BLK\"){\r\n              drawPiece(ctx, 'white', x, y)\r\n              board.grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"WHT\";\r\n              board.pieces.white[i][2] = true;\r\n            }\r\n          }\r\n\r\n          /* draw black pieces */\r\n          for (let i in board.pieces.black){\r\n            let clickX = board.pieces.black[i][0];\r\n            let clickY = board.pieces.black[i][1];\r\n            if (clickX > x - 16 && clickX < x + 16\r\n              && clickY > y - 16 && clickY < y + 16 &&\r\n              board.grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] != \"WHT\"){\r\n                drawPiece(ctx, 'black', x, y)\r\n              board.grid[Math.round(x / 32 - 1)][Math.round(y / 32 - 1)] = \"BLK\";\r\n              board.pieces.black[i][2] = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    function drawPiece(ctx, color, x, y){\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 10, 0, 2 * Math.PI, false);\r\n      ctx.fillStyle = color;\r\n      ctx.fill();\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeStyle = color == 'white' ? 'black' : 'white';\r\n      ctx.stroke();\r\n    }\r\n  \r\n\r\n    useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      const context = canvas.getContext('2d');\r\n\r\n      draw(context);\r\n\r\n      document.getElementById(\"draw\").onclick = () => {\r\n        if (window.confirm(\"Accept draw?\")){\r\n          console.log(\"Resetting\");\r\n          board = resetBoard();\r\n          draw(context);\r\n          console.log(board);\r\n        }\r\n      }\r\n\r\n      document.getElementById(\"resign\").onclick = () => {\r\n        if (window.confirm(\"Are you sure you want to resign?\")){\r\n          console.log(\"Resetting\");\r\n          board = resetBoard();\r\n          draw(context);\r\n          console.log(board);\r\n        }\r\n      }\r\n\r\n      function addScore(color){\r\n        if (color == 'BLK')\r\n          blackScore++;\r\n        else if (color == 'WHT')\r\n          whiteScore++;\r\n        document.getElementById(\"score\").innerText = `BLACK: ${blackScore} WHITE: ${whiteScore}`;\r\n        board = resetBoard();\r\n        draw(context);\r\n      }\r\n\r\n      canvas.addEventListener('mousedown', (e) => {\r\n  \r\n        getClickPos(canvas, e);\r\n  \r\n        draw(context)\r\n        /* print grid array to console */\r\n        let gridString = \"\";\r\n        for (let y = 0; y < 15; y++){\r\n          gridString += \"\\n\"\r\n          for (let x = 0; x < 15; x++){\r\n            gridString += `${x + 1},${y + 1}[${board.grid[x][y]}]`\r\n          }\r\n        }\r\n        console.log(gridString)\r\n  \r\n        /* check to see if 5 in a row has been achieved */\r\n        for (let x = 0; x < 11; x++){\r\n          for (let y = 0; y < 15; y++){\r\n            if (board.grid[x][y] == 'BLK' || board.grid[x][y] == 'WHT'){\r\n              /* check for a horizontal 5 */\r\n              if(board.grid[x][y] == board.grid[x + 1][y] &&\r\n                board.grid[x][y] == board.grid[x + 2][y] &&\r\n                board.grid[x][y] == board.grid[x + 3][y] &&\r\n                board.grid[x][y] == board.grid[x + 4][y]){\r\n                  addScore(board.grid[x][y])\r\n              }\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* check to see if a player has finished turn by \r\n        placing a true piece */\r\n        console.log('black '+board.pieces.black[board.pieces.black.length - 1][2])\r\n        console.log('white '+board.pieces.white[board.pieces.white.length - 1][2])\r\n        if (board.pieces.black[board.pieces.black.length - 1][2] &&\r\n          board.pieces.white[board.pieces.white.length - 1][2]){\r\n          if (board.pieces.turn == 'black'){\r\n              board.pieces.turn = 'white'\r\n              document.getElementById('whosturn').innerText = \"It is white's turn\";\r\n          }\r\n          else if (board.pieces.turn == 'white'){\r\n              board.pieces.turn = 'black'\r\n              document.getElementById('whosturn').innerText = \"It is black's turn\";  \r\n          }\r\n          console.log(`${board.pieces.turn}'s turn`)\r\n        }\r\n      })\r\n    }, [draw])\r\n    \r\n    return <canvas ref={canvasRef} {...props}/>\r\n}\r\n\r\nexport {Canvas, board};","function emptyBoard(){\r\n\r\n    /* 15x15 grid in memory */\r\n    let grid = [];\r\n    for (let i = 0; i < 15; i++){\r\n        grid.push([])\r\n        for (let j = 0; j < 15; j++){\r\n        grid[i].push(`   `)\r\n        }\r\n    }\r\n\r\n    /* stores clicks and whether they are valid piece placements\r\n    and also tracks whos turn it is */\r\n    return {pieces: {\r\n        black: [],\r\n        white: [],\r\n        turn: 'black'\r\n    },\r\n    grid}\r\n    \r\n};\r\n\r\nexport {emptyBoard};","import React from 'react';\r\nimport $ from 'jquery';\r\nimport './App.css';\r\nimport './style.css';\r\nimport {Canvas, offerDraw} from './canvas.js';\r\n/* import { FiPhoneCall } from 'react-icons/fi';\r\nimport { FiInstagram } from 'react-icons/fi';\r\nimport { FiMail } from 'react-icons/fi'; */\r\nimport './fonts/GreatVibes-Regular.ttf';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\r\n      <head>\r\n\t\t    <title>\r\n\t\t    \tGomoku\r\n\t    \t</title>\r\n\t    </head>\r\n\t    <body>\r\n          {/* */}\r\n\r\n          <Canvas width=\"495\" height=\"495\"></Canvas>\r\n          <div id=\"whosturn\">Black's turn to start</div>\r\n          <div id=\"score\">BLACK: 0 WHITE: 0</div>\r\n          <button id=\"draw\">OFFER DRAW</button>\r\n          <button id=\"resign\">RESIGN</button>\r\n\r\n\r\n          {/* */}\r\n          <script src=\"modal.js\"></script>\r\n\t  </body>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}